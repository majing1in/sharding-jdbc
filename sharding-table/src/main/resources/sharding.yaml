# https://shardingsphere.apache.org/document/5.3.2/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/
# https://www.bookstack.cn/read/shardingsphere-5.4.1-zh/0944b5f2050bbda4.md
# https://www.cnblogs.com/xiekun/p/13963333.html

# 数据源配置
dataSources:
  # 这里的 sharding 是数据源的名称(自定义)，需要多分库时，再重新写一套 sharding1: dataSourceClassName... 这样即可
  write_ds:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://10.0.0.22:3306/malldb_9qqhed?serverTimezone=Asia/Shanghai&character_set_server=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&tinyInt1isBit=false
    username: write
    password: S#vjd31VN2
  read_ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://10.0.0.22:3306/malldb_9qqhed?serverTimezone=Asia/Shanghai&character_set_server=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&tinyInt1isBit=false
    username: read
    password: F#vdj31VJD

# 规则配置
rules:
  - !READWRITE_SPLITTING
    dataSources:
      # 读写分离逻辑数据源名称，默认使用 Groovy 的行表达式 SPI 实现来解析
      readwrite_ds:
        # 写库数据源名称，默认使用 Groovy 的行表达式 SPI 实现来解析
        writeDataSourceName: write_ds
        # 读库数据源名称，多个从数据源用逗号分隔，默认使用 Groovy 的行表达式 SPI 实现来解析
        readDataSourceNames:
          - read_ds_0
        # 事务内读请求的路由策略，可选值：PRIMARY（路由至主库）、FIXED（同一事务内路由至固定数据源）、DYNAMIC（同一事务内路由至非固定数据源）。默认值：DYNAMIC
        transactionalReadQueryStrategy: PRIMARY
        # 负载均衡算法名称
        loadBalancerName: random
    # 负载均衡算法配置
    loadBalancers:
      # 负载均衡算法名称
      random:
        # 负载均衡算法属性配置
        type: RANDOM
  - !SINGLE
      tables:
        - "readwrite_ds.*"
  - !SHARDING
    # 表策略配置
    tables:
      # order_record 是逻辑表，订单表
      tb_order:
        # 配置数据节点
        actualDataNodes: readwrite_ds.tb_order
        tableStrategy:
          # 使用标准分片策略
          standard:
            # 配置分片字段，以哪个字段作为分片标准
            shardingColumn: order_time
            # 分片算法名称，不支持大写字母和下划线，否则启动就会报错
            shardingAlgorithmName: auto-custom
    # 分片算法配置
    shardingAlgorithms:
      # 分片算法名称，不支持大写字母和下划线，否则启动就会报错
      auto-custom:
        # 类型：自定义策略
        type: CLASS_BASED
        props:
          # 分片策略
          strategy: standard
          # 分片算法类
          algorithmClassName: com.sharding.table.algorithm.TimeShardingAlgorithm
props:
  # 输出SQL
  sql-show: true